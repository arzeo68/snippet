
{
    "javascript": [
        {
            "label": "For loop",
            "description": "For loop incrementing from 0 to count",
            "snippet": [
                "for (let i = 0; i < ${1:count}; i++) {",
                "\t${2:/* code */}",
                "}"
            ]
        },
        {
            "label": "Reverse For loop",
            "description": "For loop incrementing from 0 to count",
            "snippet": [
                "for (let i = ${1:count}; i >= 0; i--) {",
                "\t${2:/* code */}",
                "}"
            ]
        },
        {
            "label": "For Each Loop",
            "description": "Iterate over an array using forEach",
            "snippet": [
                "${1:array}.forEach(item => {",
                "\t${2:/* code */}",
                "});"
            ]
        },
        {
            "label": "Function Declaration",
            "description": "Create a function",
            "snippet": [
                "function ${1:functionName}(${2:parameters}) {",
                "\t${3:/* code */}",
                "}"
            ]
        },
        {
            "label": "Arrow Function",
            "description": "Create an arrow function",
            "snippet": [
                "const ${1:functionName} = (${2:parameters}) => {",
                "\t${3:/* code */}",
                "};"
            ]
        },
        {
            "label": "Print error",
            "description": "console error message",
            "snippet": [
                "console.error(\"[$TM_FILENAME l.$TM_LINE_NUMBER]: ${1:/* message */}\");"
            ]
        },
        {
            "label": "Switch Statement",
            "description": "Switch statement with cases",
            "snippet": [
                "switch (${1:expression}) {",
                "\tcase ${2:value1}:",
                "\t\t${3:/* code for case 1 */}",
                "\t\tbreak;",
                "\tcase ${4:value2}:",
                "\t\t${5:/* code for case 2 */}",
                "\t\tbreak;",
                "\tdefault:",
                "\t\t${6:/* default code */}",
                "}"
            ]
        }
        
    ],
    "typescript": [
        {
            "label": "For loop",
            "description": "For loop incrementing from 0 to count",
            "snippet": [
                "for (let i = 0; i < ${1:count}; i++) {",
                "\t${2:/* code */}",
                "}"
            ]
        },
        {
            "label": "Reverse For loop",
            "description": "For loop incrementing from 0 to count",
            "snippet": [
                "for (let i = ${1:count}; i >= 0; i--) {",
                "\t${2:/* code */}",
                "}"
            ]
        },
        {
            "label": "For Each Loop",
            "description": "Iterate over an array using forEach",
            "snippet": [
                "${1:array}.forEach(item => {",
                "\t${2:/* code */}",
                "});"
            ]
        },
        {
            "label": "Function Declaration",
            "description": "Create a function",
            "snippet": [
                "function ${1:functionName}(${2:parameters}): ${3:returnType} {",
                "\t${4:/* code */}",
                "}"
            ]
        },
        {
            "label": "Arrow Function",
            "description": "Create an arrow function",
            "snippet": [
                "const ${1:functionName} = (${2:parameters}): ${3:returnType} => {",
                "\t${4:/* code */}",
                "};"
            ]
        },
        {
            "label": "Switch Statement",
            "description": "Switch statement with cases",
            "snippet": [
                "switch (${1:expression}) {",
                "\tcase ${2:value1}:",
                "\t\t${3:/* code for case 1 */}",
                "\t\tbreak;",
                "\tcase ${4:value2}:",
                "\t\t${5:/* code for case 2 */}",
                "\t\tbreak;",
                "\tdefault:",
                "\t\t${6:/* default code */}",
                "}"
            ]
        },
        {
            "label": "Interface",
            "description": "Create an interface",
            "snippet": [
                "interface ${1:interfaceName} {",
                "\t${2:/* code */}",
                "}"
            ]
        },
        {
            "label": "Class",
            "description": "Create a class",
            "snippet": [
                "class ${1:className} {",
                "\t${2:/* code */}",
                "}"
            ]
        }
    ],
    "python": [
        {
            "label": "For loop",
            "description": "For loop incrementing from 0 to count",
            "snippet": [
                "for i in range(${1:count}):",
                "\t${2:/* code */}"
            ]
        },
        {
            "label": "Reverse For loop",
            "description": "For loop incrementing from 0 to count",
            "snippet": [
                "for i in range(${1:count}, 0, -1):",
                "\t${2:/* code */}"
            ]
        },
        {
            "label": "For Each Loop",
            "description": "Iterate over an array using forEach",
            "snippet": [
                "for item in ${1:array}:",
                "\t${2:/* code */}"
            ]
        },
        {
            "label": "Function Declaration",
            "description": "Create a function",
            "snippet": [
                "def ${1:functionName}(${2:parameters}):",
                "\t${3:/* code */}"
            ]
        },
        {
            "label": "Print",
            "description": "Print to console",
            "snippet": [
                "print(${1:/* message */})"
            ]
        },
        {
            "label": "Switch Statement",
            "description": "Switch statement with cases",
            "snippet": [
                "switch (${1:expression}) {",
                "\tcase ${2:value1}:",
                "\t\t${3:/* code for case 1 */}",
                "\t\tbreak;",
                "\tcase ${4:value2}:",
                "\t\t${5:/* code for case 2 */}",
                "\t\tbreak;",
                "\tdefault:",
                "\t\t${6:/* default code */}",
                "}"
            ]
        },
        {
            "label": "Class",
            "description": "Create a class",
            "snippet": [
                "class ${1:className}:",
                "\t${2:/* code */}"
            ]
        },
        {
            "label": "Exception handling",
            "description": "Try catch block",
            "snippet": [
                "try:",
                "\t${1:/* code */}",
                "except ${2:Exception}:",
                "\t${3:/* code */}"
            ]
        },
        {
            "label": "Regular Expression match",
            "description": "Check if string matches pattern",
            "snippet": [
                "import re",
                "re.match(${1:pattern}, ${2:string})"
            ]
        },
        {
            "label": "Regular Expression search",
            "description": "Search string for pattern",
            "snippet": [
                "import re",
                "re.search(${1:pattern}, ${2:string})"
            ]
        },
        {
            "label": "Generate random number",
            "description": "Generate random number",
            "snippet": [
                "import random",
                "random.randint(${1:lower}, ${2:upper})"
            ]
        },
        {
            "label": "AWS Lambda Handler",
            "description": "AWS Lambda Handler with boto3",
            "snippet": [
                "import boto3",
                "",
                "def lambda_handler(event, context):",
                "\t${1:/* code */}"
            ]
        }
    ],
    "cpp": [
        {
            "label": "for",
            "description": "Code snippet for 'for' loop",
            "snippet": [
                "for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)",
                "{",
                "\t$3",
                "}"
            ]
        },
        {
            "label": "forr",
            "description": "Code snippet for reverse 'for' loop",
            "snippet": [
                "for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)",
                "{",
                "\t$3",
                "}"
            ]
        },
        {
            "label": "do",
            "description": "Code snippet for do...while loop",
            "snippet": [
                "do",
                "{",
                "\t$1",
                "} while($2);"
            ]
        },
        {
            "label": "while",
            "description": "Code snippet for while loop",
            "snippet": [
                "while ($1)",
                "{",
                "\t$2",
                "}"
            ]
        },
        {
            "label": "foreach",
            "description": "Code snippet for range-based for loop (c++11) statement",
            "snippet": [
                "for(auto ${var} : ${collection_to_loop})",
                "{",
                "\t$1",
                "}"
            ]
        },
        {
            "label": "if",
            "description": "Code snippet for if statement",
            "snippet": [
                "if ($1)",
                "{",
                "\t$2",
                "}"
            ]
        },
        {
            "label": "else",
            "description": "Code snippet for else statement",
            "snippet": [
                "else",
                "{",
                "\t$1",
                "}"
            ]
        },
        {
            "label": "else if",
            "description": "Code snippet for else-if statement",
            "snippet": [
                "else if ($1)",
                "{",
                "\t$2",
                "}"
            ]
        },
        {
            "label": "enum",
            "description": "Code snippet for enum",
            "snippet": [
                "enum ${MyEnum}",
                "{",
                "\t$1",
                "};"
            ]
        },
        {
            "label": "enum class",
            "description": "Code snippet for enum class (c++11)",
            "snippet": [
                "enum class ${MyClass} { };"
            ]
        },
        {
            "label": "class",
            "description": "Code snippet for class",
            "snippet": [
                "class $className",
                "{",
                "public:",
                "\t$className();",
                "\t$className($className &&) = default;",
                "\t$className(const $className &) = default;",
                "\t$className &operator=($className &&) = default;",
                "\t$className &operator=(const $className &) = default;",
                "\t~$className();",
                "",
                "private:",
                "\t$1",
                "};",
                "",
                "$className::$className()",
                "{",
                "}",
                "",
                "$className::~$className()",
                "{",
                "}"
            ]
        },
        {
            "label": "classi",
            "description": "Code snippet for class with inline constructor/destructor",
            "snippet": [
                "class ${MyClass}",
                "{",
                "public:",
                "\t${MyClass}() = default;",
                "\t${MyClass}(${MyClass} &&) = default;",
                "\t${MyClass}(const ${MyClass} &) = default;",
                "\t${MyClass} &operator=(${MyClass} &&) = default;",
                "\t${MyClass} &operator=(const ${MyClass} &) = default;",
                "\t~${MyClass}() = default;",
                "",
                "private:",
                "\t$1",
                "};"
            ]
        },
        {
            "label": "interface",
            "description": "Code snippet for interface (Visual C++)",
            "snippet": [
                "__interface I${Interface}",
                "{",
                "\t$1",
                "};"
            ]
        },
        {
            "label": "namespace",
            "description": "Code snippet for namespace",
            "snippet": [
                "namespace ${MyNamespace}",
                "{",
                "\t$1",
                "}"
            ]
        },
        {
            "label": "#ifdef",
            "description": "Code snippet for #ifdef",
            "snippet": [
                "#ifdef ${DEBUG}",
                "$1",
                "#endif // ${DEBUG}"
            ]
        },
        {
            "label": "#ifndef",
            "description": "Code snippet for #ifndef",
            "snippet": [
                "#ifndef ${1:1}",
                "$2",
                "#endif // !$1"
            ]
        },
        {
            "label": "#if",
            "description": "Code snippet for #if",
            "snippet": [
                "#ifdef ${1:0}",
                "$2",
                "#endif // $1"
            ]
        },
        {
            "label": "struct",
            "description": "Code snippet for struct",
            "snippet": [
                "struct ${MyStruct}",
                "{",
                "\t$1",
                "};"
            ]
        },
        {
            "label": "switch",
            "description": "Code snippet for switch statement",
            "snippet": [
                "switch (${switch_on})",
                "{",
                "default:",
                "\tbreak;$1",
                "}"
            ]
        },
        {
            "label": "try",
            "description": "Code snippet for try catch",
            "snippet": [
                "try",
                "{",
                "\t",
                "}",
                "catch (const std::exception&)",
                "{",
                "\t$1",
                "}"
            ]
        },
        {
            "label": "union",
            "description": "Code snippet for union",
            "snippet": [
                "union ${MyUnion}",
                "{",
                "\t$1",
                "};"
            ]
        },
        {
            "label": "cout",
            "description": "Code snippet for printing to std::cout, provided the header is set",
            "snippet": [
                "std::cout << \"${1:/* message */}\" << std::endl;"
            ]
        },
        {
            "label": "#inc",
            "description": "Code snippet for #include \" \"",
            "snippet": [
                "#include \"$1\""
            ]
        },
        {
            "label": "#inc<",
            "description": "Code snippet for #include \" \"",
            "snippet": [
                "#include <$1>"
            ]
        },
        {
            "label": "#def",
            "description": "Code snippet for #define \" \"",
            "snippet": [
                "#define \"$1\" \"$2\" "
            ]
        },
        {
            "label": "main",
            "description": "Code snippet for main function",
            "snippet": [
                "int main(int argc, const char** argv) {",
                "    return 0;",
                "}"
            ]
        }
    ]
}
